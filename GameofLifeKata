def get_generation(cells, generations):

    # calculate all generations with padding
    output_lists = generations_rec(cells,generations)
    
    #remove padding
    output_lists = trim_array(output_lists)
    
    # return result
    return output_lists

# def generations_rec(cells, generations):
# recursive function for caclulating the generations of cells
# pads the 2d list with an extra row / column on all 4 sides
# then gets cells states, then calls itself again
def generations_rec(cells, generations):
    # run cell calcualtions if generations is greater than zero
    # else return cells
    if generations > 0:
        # get prepadding sizes
        rows = len(cells)
        cols = len(cells[0])
        
        # get the padded 2d list of cells
        cells_padded = build_padded_cells(cells)
        
        print(cells_padded)
        
        
        # output array
        output_array = []
        
        # run through rows and cols of 2d list and find the neighbor for each item
        # includes all items in padded board
        for i in range(0,rows+2,1):
            row = []
            for j in range(0,cols+2,1):
                
                #row above
                if i == 0:
                    cells_above = 0
                elif j == 0:
                    cells_above =cells_padded[i-1][j]+cells_padded[i-1][j+1]
                elif j == cols+1:
                    cells_above = cells_padded[i-1][j-1]+cells_padded[i-1][j]
                else:
                    cells_above = cells_padded[i-1][j-1]+cells_padded[i-1][j]+cells_padded[i-1][j+1]    # add row above
                
                # row equal
                if j == 0:
                    cells_mid = cells_padded[i][j+1]
                elif j == cols+1:
                    cells_mid = cells_padded[i][j-1]
                else:
                    cells_mid = cells_padded[i][j-1]+cells_padded[i][j+1]
                
                # rows below
                if i == rows+1:
                    cells_below = 0
                elif j == 0:
                    cells_below = cells_padded[i+1][j]+cells_padded[i+1][j+1]
                elif j == cols+1:
                    cells_below = cells_padded[i+1][j-1]+cells_padded[i+1][j]
                else:
                    cells_below = cells_padded[i+1][j-1]+cells_padded[i+1][j]+cells_padded[i+1][j+1]
                    
                    
                # see if there are any alive cells
                alive_cells = cells_above + cells_mid + cells_below
                
                #get the cell status based on alive neighbours and current status
                # shifted -1 in row and column to compensate for padding
                row.append(cell_status(alive_cells,cells_padded[i][j]))
            output_array.append(row)

            
        
        # iterate again if generations is greater than zero still
        generations -=1
        if generations > 0:
            output_array = get_generation(output_array,generations)
        
        return output_array
    else:
        cells = trim_array(cells)
        return cells
    
# def build_padded_cells()
# adds a row of padding around all 4 edges of the 2d list
def build_padded_cells(cells):
    # get the lengths of the array
    rows = len(cells)
    cols = len(cells[0])
        
    # build a row of zros
    zeros = [0] * (cols+2)

    # pad the top fo the board
    cells_padded = []
    cells_padded.append(zeros)
    

    # pad the rows so we have an 8 adjeceny on all
    for row in cells:
        row_padded = []
        row_padded.append(0)
        for item in row:
            row_padded.append(item) # append right element
        row_padded.append(0)
        cells_padded.append(row_padded)

    # pad bottom of the board too
    cells_padded.append(zeros)
    
    return cells_padded

# function for determining the status of the cell (alive or dead)
def cell_status(alive_cells,current_status):
    if alive_cells == 3:
        return 1
    elif alive_cells == 2:
        return current_status
    elif alive_cells < 2 or alive_cells > 3:
        return 0
    else:
        return 0

def trim_array(output_lst):
    # do while loop to trim the 2d list
    first_row_sum,last_row_sum,first_col_sum,last_col_sum = calculate_edge_sums(output_lst)
    
    while first_row_sum == 0 or last_row_sum == 0 or first_col_sum == 0 or last_col_sum == 0:
       #trims the 2d list of any empty rows or columns
        if first_row_sum == 0:
            output_lst = output_lst[1:][:]
        if last_row_sum == 0:
            output_lst = output_lst[:len(output_lst)-1][:]
        if first_col_sum == 0:
            for row in output_lst:
                del row[0]
        if last_col_sum == 0:
            for row in output_lst:
                del row[len(row)-1]
        
        #recalulate the sums
        first_row_sum,last_row_sum,first_col_sum,last_col_sum = calculate_edge_sums(output_lst)
        
    return output_lst

# def
# check rows and columns to delete
# returns list of first row, last row, first column, last column
def calculate_edge_sums(output_lst):
        # see what need trimming
        first_row_sum = sum(output_lst[0][:])
        last_row_sum = sum(output_lst[len(output_lst)-1][:])
        
        # sum the first and last "columns"
        first_col_sum = sum_column(output_lst,0)
        last_col_sum = sum_column(output_lst,len(output_lst[:][0])-1)
        
        return [first_row_sum,last_row_sum,first_col_sum,last_col_sum]
        
        

# def sum_column(lst_2d,index):
# function for caclulating the sum of a column in 2d list (at specified index)
def sum_column(lst_2d,index):
    col_sum = 0
    for row in lst_2d:
        col_sum += row[index]
    
    return col_sum
    
    