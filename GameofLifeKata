from collections import deque

def get_generation(cells, generations):
    if generations > 0:
        # pad the cells
        rows = len(cells)
        cols = len(cells[0])

        zeros = [0] * (cols+2)

        # output array
        output_array = []


        # pad the top fo the board
        cells_padded = []
        cells_padded.append(zeros)

        # pad the rows so we have an 8 adjeceny on all
        for row in cells:
            row_padded = []
            row_padded.append(0)
            for item in row:
                row_padded.append(item) # append right element
            row_padded.append(0)
            cells_padded.append(row_padded)

        # pad bottom of the board too
        cells_padded.append(zeros)

        # do the middle
        for i in range(1,rows+1,1):
            row = []
            for j in range(1,cols+1,1):
                if i == 0:
                    cells_above = 0
                else:
                    cells_above = cells_padded[i-1][j-1]+cells_padded[i-1][j]+cells_padded[i-1][j+1]    # add row above
                if j == 0:
                    cells_mid = 
                cells_mid = cells_padded[i][j-1]+cells_padded[i][j+1]                               # add items in row
                cells_below = cells_padded[i+1][j-1]+cells_padded[i+1][j]+cells_padded[i+1][j+1]    # add items in row below
                alive_cells = cells_above + cells_mid + cells_below
                print(alive_cells)
                print(generations)
                print(str(cells[i-1][j-1])+" value")

                #get the cell status based on alive neighbours and current status
                # shifted -1 in row and column to compensate for padding
                row.append(cell_status(alive_cells,cells[i-1][j-1]))
            output_array.append(row)
            

        generations -=1
        print(output_array)
    
        if generations >= 0:
            output_array = get_generation(output_array,generations)

        return output_array
    else:
        return cells

# function for determining the status of the cell (alive or dead)
def cell_status(alive_cells,current_status):
    if alive_cells == 3:
        return 1
    elif alive_cells == 2:
        return current_status
    elif alive_cells < 2 or alive_cells > 3:
        return 0
    else:
        return 0
    